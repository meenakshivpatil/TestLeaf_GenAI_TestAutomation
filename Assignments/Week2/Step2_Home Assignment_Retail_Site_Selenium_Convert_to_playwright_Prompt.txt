Instructions:

Use Playwright v1.56+ syntax and best practices for TypeScript
Keep all original test steps exactly and do not modify existing steps
Use locators in selenium java code such as css
Do not use thread.sleep instead use explicit and implicit wait
Insert comments as per steps
Include proper comments for playwright typescript
Output must be valid AI typescript
Keep timeout as 60 seconds

Context:

You are an AI assistant specialized in test automation migration
Your task is to translate Selenium Java code into Playwright Typescript code

Example


Java Selenium code

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.time.Duration;

public class GetStartedTest {
    public static void main(String[] args) {
        // Set up the WebDriver (Assuming ChromeDriver is in your system PATH)
        WebDriver driver = new ChromeDriver();

        try {
            // Navigate to the Playwright website
            driver.get("https://playwright.dev/");

            // Maximize window (optional)
            driver.manage().window().maximize();

            // Wait until the "Get started" link is visible and clickable
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            WebElement getStartedLink = wait.until(
                ExpectedConditions.elementToBeClickable(By.linkText("Get started"))
            );

            // Click the "Get started" link
            getStartedLink.click();

            // Wait until the "Installation" heading is visible
            WebElement installationHeading = wait.until(
                ExpectedConditions.visibilityOfElementLocated(By.xpath("//h1[text()='Installation']"))
            );

            // Assert that the heading is displayed
            if (installationHeading.isDisplayed()) {
                System.out.println("Test passed: Installation heading is visible.");
            } else {
                System.out.println("Test failed: Installation heading is not visible.");
            }

        } finally {
            // Close the browser
            driver.quit();
        }
    }
}



Playwright Typescript code equivalent of above Java selenium code

 Playwright code

test('get started link', async ({ page }) => {
  await page.goto('https://playwright.dev/');

  // Click the get started link.
  await page.getByRole('link', { name: 'Get started' }).click();

  // Expects page to have a heading with the name of Installation.
  await expect(page.getByRole('heading', { name: 'Installation' })).toBeVisible();
});

My example is completed, you can convert the selenium java code below into playwright typescript


package test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import java.util.List;

public class SecondTest {

    public static void main(String[] args) {
        // Set path to ChromeDriver executable
        //System.setProperty("webdriver.chrome.driver", "/path/to/chromedriver");

        WebDriver driver = new ChromeDriver();

        try {
            // 1. Open Blinkit
            driver.get("https://blinkit.com/");
            driver.manage().window().maximize();

            // 2. Pause to let the location modal load
            Thread.sleep(3000);  // Sleep for 3 seconds

            // 3. Find the input field and type "chinchawad"
            WebElement locationInput = driver.findElement(By.cssSelector("input[placeholder='search delivery location']"));
            locationInput.sendKeys("chinchawad");

            // 4. Wait for suggestions to load
            Thread.sleep(2000);  // Sleep for 2 seconds

            // 5. Find all suggested location items
            List<WebElement> locationItems = driver.findElements(
                By.className("LocationSearchList__LocationListContainer-sc-93rfr7-0")
            );

            // 6. Loop through and click "Chinchwad Gaon"
            for (WebElement item : locationItems) {
                String label = item.findElement(
                    By.className("LocationSearchList__LocationLabel-sc-93rfr7-2")
                ).getText();

                if (label.equalsIgnoreCase("Chinchwad Gaon")) {
                    item.click();
                    System.out.println("Selected location: " + label);
                    break;
                }
            }

            // 7. Wait to observe result (optional)
            Thread.sleep(3000);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Close the browser
            driver.quit();
        }
    }
}
